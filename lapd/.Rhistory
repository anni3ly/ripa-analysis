3+3
install.packages(c('pbdZMQ', 'repr', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest')
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages(devtools'')
install.packages('devtools')
install.packages("RMySQL")
RMySQL::
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages("RMySQL")
.libPaths()
RMYSQL
RMYSQL
RMySQL
RMySQL
RMySQL
RMySQL::
RMySQL
install.packages("RMySQL")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("RMySQL")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("ggplot2")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("ggplot2")
install.packages("Rcpp")
trace(utils:::unpackPkgZip, edit=TRUE)
library("datasets")
library("nlme")
head(USJudgeRatings)
colMeans(USJudgeRatings)
judges.scaled <- scale(USJudgeRatings)
head(judges.scaled)
head(sort(rowSums(judges.scaled), decreasing = TRUE))
scores <- data.frame(bdf)
head(scores)
bigclass <- ifelse(scores$classsiz>=25, 1, 0) # marking a "large" class if it has 25+ students
scores <- cbind(scores, bigclass) # adding the column back to the data frame
head(scores[,c("langPOST", "bigclass")])
tapply(scores$langPOST, scores$bigclass, mean)
t.test(langPOST ~ bigclass, data=scores)
t.test(langPOST ~ sex, data=scores)
denom <- factor(scores$denomina, labels=(c("public","Protestant","Catholic","non-denom")))
round(tapply(scores$langPOST, denom, mean), digits=2)
aov.denom <- aov(langPOST ~ factor(denomina), data=scores)
summary(aov.denom)
pairwise.t.test(scores$langPOST, denom, p.adj="holm")
statedata <- data.frame(state.x77)
head(statedata)
plot(Life.Exp ~ HS.Grad, data = statedata, xlab = "High school graduates (%)", ylab = "Life expectancy (years)")
hs_le_model <- lm(Life.Exp ~ HS.Grad, data = statedata)
summary(hs_le_model)
multi_model <- lm(Life.Exp ~ HS.Grad + Murder + Illiteracy, data = statedata)
statedata$Life.Exp_predicted <- predict(multi_model)
summary(multi_model)
head(
statedata[
order(statedata$residual, decreasing = TRUE),
c('HS.Grad','Murder','Illiteracy','Life.Exp','Life.Exp_predicted','residual')
]
)
statedata$residual <- residuals(multi_model)
# save the R data into a new variable
titanic <- data.frame(Titanic)
head(titanic[order(titanic$Freq, decreasing = TRUE),])
# replicate each line as many times as the "Freq" column calls for
# also, drop the "Freq" column
titanic_long <- titanic[,c(1,2,3,4)][rep(seq_len(dim(titanic)[1]), titanic$Freq),]
# confirm that we now have a row for every passenger, which matches the sum of "Freq"
print(c(nrow(titanic_long), sum(titanic$Freq)))
# drop all the rows with a frequency of 0
titanic <- titanic[titanic$Freq != 0,]
head(titanic_long)
str(titanic_long)
titanic_model <- glm(
Survived ~ Class + Sex + Age,
data = titanic_long,
family = 'binomial'
)
summary(titanic_model)
table(titanic_long$Age, titanic_long$Survived)
child_risk <- 57 / (57 + 52)
child_risk
adult_risk <- 654 / (654 + 1438)
adult_risk
child_risk / adult_risk
plot(Life.Exp ~ HS.Grad, data = statedata, xlab = "High school graduates (%)", ylab = "Life expectancy (years)")
hs_le_model <- lm(Life.Exp ~ HS.Grad, data = statedata)
summary(hs_le_model)
hs_le_model <- lm(Life.Exp ~ HS.Grad, data = statedata)
summary(hs_le_model)
multi_model <- lm(Life.Exp ~ HS.Grad + Murder + Illiteracy, data = statedata)
summary(multi_model)
statedata$Life.Exp_predicted <- predict(multi_model)
statedata$residual <- residuals(multi_model)
head(
statedata[
order(statedata$residual, decreasing = TRUE),
c('HS.Grad','Murder','Illiteracy','Life.Exp','Life.Exp_predicted','residual')
]
)
# save the R data into a new variable
titanic <- data.frame(Titanic)
head(titanic[order(titanic$Freq, decreasing = TRUE),])
# drop all the rows with a frequency of 0
titanic <- titanic[titanic$Freq != 0,]
# replicate each line as many times as the "Freq" column calls for
# also, drop the "Freq" column
titanic_long <- titanic[,c(1,2,3,4)][rep(seq_len(dim(titanic)[1]), titanic$Freq),]
# confirm that we now have a row for every passenger, which matches the sum of "Freq"
print(c(nrow(titanic_long), sum(titanic$Freq)))
head(titanic_long)
str(titanic_long)
titanic_model <- glm(
Survived ~ Class + Sex + Age,
data = titanic_long,
family = 'binomial'
)
summary(titanic_model)
table(titanic_long$Age, titanic_long$Survived)
child_risk <- 57 / (57 + 52)
child_risk
adult_risk <- 654 / (654 + 1438)
adult_risk
child_risk / adult_risk
head(USJudgeRatings)
colMeans(USJudgeRatings)
library("datasets")
library("nlme")
head(USJudgeRatings)
colMeans(USJudgeRatings)
?scale
scale(USJudgeRatings)
judges.scaled <- scale(USJudgeRatings)
j <- scale(USJudgeRatings)
head(judges.scaled)
13.59*2 + 34.13*2
head(sort(rowSums(judges.scaled), decreasing = TRUE))
?USJudgeRatings
rowSums(USJudgeRatings)
sort(rowSums(USJudgeRatings))
?bdf
scores <- data.frame(bdf)
View(scores)
bigclass <- ifelse(scores$classsiz>=25, 1, 0) # marking a "large" class if it has 25+ students
scores <- cbind(scores, bigclass) # adding the column back to the data frame
head(scores[,c("langPOST", "bigclass")])
bigclass <- ifelse(scores$classsiz>=25, 1, 0) # marking a "large" class if it has 25+ students
scores <- cbind(scores, bigclass) # adding the column back to the data frame
head(scores[,c("langPOST", "bigclass")])
tapply(scores$langPOST, scores$bigclass, mean)
?tapply
41.11-40.84
t.test(langPOST ~ bigclass, data=scores)
t.test(langPOST ~ sex, data=scores)
denom <- factor(scores$denomina, labels=(c("public","Protestant","Catholic","non-denom")))
round(tapply(scores$langPOST, denom, mean), digits=2)
aov.denom <- aov(langPOST ~ factor(denomina), data=scores)
summary(aov.denom)
pairwise.t.test(scores$langPOST, denom, p.adj="holm")
?pairwise.t.test
statedata <- data.frame(state.x77)
View(statedata)
plot(Life.Exp ~ HS.Grad, data = statedata, xlab = "High school graduates (%)", ylab = "Life expectancy (years)")
hs_le_model <- lm(Life.Exp ~ HS.Grad, data = statedata)
summary(hs_le_model)
plot(hs_le_model)
plot(Life.Exp ~ HS.Grad, data = statedata, xlab = "High school graduates (%)", ylab = "Life expectancy (years)")
abline(hs_le_model)
multi_model <- lm(Life.Exp ~ HS.Grad + Murder + Illiteracy, data = statedata)
summary(multi_model)
View(scores)
hist(scores$langPOST)
summary(scores)
View(scores)
summary(scores)
hist(scores$langPOST)
install.packages("readxl")
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages("readxl")
install.packages("data.table")
source('lib/opp.R')
source('lib/threshold_test.R')
# run every line of code in these files
source('../lib/opp.R')
setwd("~/GitHub/ripa-analysis/lapd")
library(assertr)
install.packages('assertr')
Trace(utils:::unpackPkgZip, edit=TRUE)
Trace(utils:::unpackPkgZip, edit=TRUE)
trace(utils:::unpackPkgZip, edit=TRUE)
install.packages('assertr')
